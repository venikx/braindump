#+title: Handmade Hero
#+roam_tags: video reading
#+roam_key: cite:muratori_handmadehero_2014
#+roam_key: https://handmadehero.org
#+roam_key: https://hero.handmade.network/episode/code
#+created: [2020-12-06 Sun 02:11]
#+modified: [2021-02-22 Mon 02:46]

* Metadata
- Author: [[roam:Casey Muratori]]
- Reason: I'm interested in understanding how game engines and games work from scratch.
* Notes
** Day 001 - Setting up the Windows Build
*** Instal the C/C++ tools for Windows at https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019
*** Automation with ~.bat~ files
**** Setting the ~env~
The ~cl~ command-line tool controls the Microsoft C/C++ compiler and linker and comes pre-installed
with Visual Studio 2019 (*check* the /C++ Desktop Environment/). The command is *not* exposed in the
/cmd.exe/ by default (sad).

#+NAME: setenv.bat
#+BEGIN_SRC bat
@echo off

call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64
REM set path=D:\Office\Documents\dev\handmade\misc;%path%
#+END_SRC

**** Building
A simplified version of more commonly known /make/ systems, such as ~gnu make~, ~ninja~ or ~cmake~. The
mantra being =Dumb and simple=, too much time is lost in complex build sytems. The /batch/ file will be
responsible for setting the environment and compiling all the code all the time.

According to Casey there is no need for compiling the modified files only to speed up the build
process if you program sanely.

#+NAME: build.bat
#+BEGIN_SRC bat
  @echo off

  mkdir ..\build
  pushd ..\build
  cl -Zi ..\code\win32_handmade.cpp user32.lib
  popd
#+END_SRC

*** Debugging ~devenv~ (starts up Visual Studio)
Change the working dir of the ~win32_handmade~ start-up project to use the /root/ in stead of the /build\/
folder and create a sln file in misc/ when you ar eusing Visual Studio for debugging purposes. Consider buying
RemedyBG.

*** Windows dependencies
The MSDN pages document which lib needs to be important for each function.

Windows needs to bind to our code, find the places where we call Windows functions and patch those
with pointers to the location in memory where those functions are running at that time.

The functions coming from the /kernel/ don't require an /import library/ (Windows magic). ~WinMain~ is
part of those kernel functions. Calls to the UI system, requires building the project with specific
lib files. The /linker/ complains when these libraries are missing, since it doesn't know how to
insert certain functions when patching the Windows code.

** Day 002 - Opening a Win32 Window
*** [[https://docs.microsoft.com/en-us/windows/win32/learnwin32/creating-a-window][Creating a Window]]
Method of initialization:
- zero is initialization :: clear the whole struct to zero (used when performance is not a concern)
- contructors :: initializes values in the typical C++ way

The ~hInstance~ is either passed in from ~WinMain~ or retrieved by calling ~GetModuleHandle(0)~, which
asks the kernel for the window instance of the currently running code.

*** [[https://docs.microsoft.com/en-us/windows/win32/learnwin32/window-messages][Handling Window messages]]
Notice the different between *sending* and *posting* a message. Posting puts the message in
the queue, which is handled by the ~WindowHandle~ => ~GetMessage~ => ~TranslateMessage~ => ~DispatchMessage~
flow. Sending skips the queue and the OS call the ~WNDPROC~ directly.

*** [[https://docs.microsoft.com/en-us/windows/win32/learnwin32/writing-the-window-procedure][Writing the Window procedure]]
The ~WNDPROC~ passes incoming messages related to the program. These messages can be acted upon or
passed back to Windows if you don't want to handle them.

*** [[https://docs.microsoft.com/en-us/windows/win32/learnwin32/painting-the-window][Painting the Window]]
In stead of ~FillRect~, use [[https://docs.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-patblt][PatBlt]] to draw something fullscreen.

** Day 003 - Allocating a Backbuffer
*** [[https://docs.microsoft.com/en-us/windows/win32/learnwin32/closing-the-window][Closing the Window]]
Things are better acquired and released in aggregate. Think of them as a group of resources, not as
a single resource. Create and release in waves.

*** Different use cases for ~static~
Keyword ~static~'s use-case is context dependent:
1. Scope a function to a file (making it invisible for other files to import it)
2. Define it locally in a function to persist a value when the scope is recreated
3. Define it globally for everyone to be used

Good practice to give semantic meaning to those use-cases:
1. ~#define internal static~
2. ~#define local_persist static~
2. ~#define global_variable static~

*** Naming conventions
Example: ~MainWindowCallback~ should become ~Win32MainWindowCallback~.

*** How to draw stuff on the screen?
Handle ~WM_SIZE~, in which you call [[https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclientrect][GetClientRect]] to receive the coordinates from the area where can
draw towards (meaning window - the windows close, minimize and maximize bar).

Use [[https://docs.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-stretchdibits][StretchDIBits]] /(DIB = Device Independant Bitmap)/ to pass in the memory location of your own
bitmap and ask Windows to copy/render the bitmap to the screen.
Why? => Reduces interfacing with the Windows api's to a minimum!

*** What is ~void **bitmapMemory~?
A ~void *~ is a void pointer variable is a pointer to a raw memory address, where you don't give a shit
about the type of the value. Useful for when you don't know what type you are receiving. If you do know
the type, you can cast it to the type of your choice.

[[https://docs.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createdibsection][CreateDIBSection]] only understand what type to give back once it gets passed the arguments, so the
pointer's data type is unknown.

** Day 004 - Animating the Backbuffer
*** [[https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc][VirtualAlloc]]
Using ~StretchDIBits~, we don't need ~CreateDIBSection~, since we can create the memory ourselves. The
memory is allocated using the Windows allocater function in stead of ~malloc~, since you avoid going
through some of the C runtime library.

Free memory via [[https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualfree][VirtualFree]].

*** Storing pixels in memory
RGB in memory is represented with 4 bytes, in stead of 3. It's more efficient to retrieve the memory
using 4 bytes, which why the colors are represented with an extra empty byte => unaligned memory access.

| Code (theory)                       | RR GG BB xx |
| Memory (little endian)              | xx BB GG RR |
| Memory (per Microsoft's preference) | xx RR GG BB |
| Code (actual)                       | BB GG RR xx |

So when loading in RGB colors in memory on Microsoft, BB and RR need to swapped, so they are in the
correct order when looking on the registry.

Drawing the pixels on the screen is "as easy" is directly modifying the colors for pixels in
memory. The UpdateWindow takes care of actually putting the bitmap onto the window.

*** [[https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-peekmessagea][PeekMessage]]
Changing from ~GetMessage~ is important, since it waits for an actual message to come by, which means
that our program doesn't loop during those "waiting times". ~PeekMessage~ on the other hand just
checks if something is in the queue and immediately return the event if there is something that
needs to be handled.

** Day 005 - Windows Graphics Review
Mainly used to review the week + clean up code.
- Global variables get bundled into a struct ~win32_offscreen_buffer~
- Only create the back buffer once, by moving it out of ~WM_SIZE~
- ~const~ is useless and doesn't exist in the compiler, because it can't know for sure if such
  variable won't be mutated

** Day 006 - Gamepad and Keyboard Input
*** [[https://docs.microsoft.com/en-us/windows/win32/xinput/getting-started-with-xinput][XInput]]
There's three methods to get the input:
- Interrupt :: device tells system when it changed (kinda old school)
- Polling :: system asks the device for it's state (most common)
- Streaming :: device continuously tells it's state to the system (so kinda like an interrupt), but
  it acts more as a "network" where you send packets

[[https://docs.microsoft.com/en-us/windows/win32/api/xinput/nf-xinput-xinputgetstate][XInputGetState]] returns this state of the controller, while [[https://docs.microsoft.com/en-us/windows/win32/api/xinput/nf-xinput-xinputsetstate][XInputSetState]] makes it possible to set
the vibration on a compatible controller. The API is small and good.

We don't want the game to crash when the user doesn't have XInput installed, especially since the
user might not even intend to play the game with a controller. We can do what Windows does behind
the scenes to have more control over it.
Load the ~xinput1_4.dll~ via [[https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya][LoadLibrary]] and retrieve the address to the function we want to use from
that library by calling [[https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress][GetProcAddress]]. (essentially this is exactly what Windows anyways).

Essentially there's a dummy function in our program that gets called and return an error when xinput
is not available without crashing the game.

*** Keyboard
The WPARAM from the WindowCallback holds the pressed (or released) key when the message is either
~WM_SYSKEYUP~, ~WM_KEYUP~, ~WM_SYSKEYDOWN~ or ~WM_KEYUP~. The LPARAM holds additional information
regarding the pressed (or released key). See each event for the details.

Note that Windows needs to translate the WParam and LParam from the interrupt it received which
represents the Virtual-Key Code of the pressed key. The virtual key code is the code of the physical
location of a key as it were located on a regular QWERTY keyboard. 

* Highlights
